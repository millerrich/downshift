{"version":3,"sources":["pages/Navbar.js","pages/set.js","components/sign-up.js","App.js","registerServiceWorker.js","index.js"],"names":["navabar","react_default","a","createElement","Navbar","className","variant","Brand","to","Nav","Link","href","setAlarm","_useState","useState","_useState2","Object","slicedToArray","time","setTime","Fragment","CardGroup","Card","style","display","alignItems","justifyContent","lib_default","onChange","data","formatted12","Body","Text","SignUp","username","setUserName","_useState3","_useState4","password","setPassword","htmlFor","type","id","aria-describedby","placeholder","event","target","value","onClick","preventDefault","console","log","axios","post","then","response","catch","err","App","react_router_dom","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.159b961b.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom'\nimport { Button, Navbar, Nav, Form, FormControl } from 'react-bootstrap';\n\nexport default function navabar() {\n    return (\n        <Navbar className=\"navColor\" variant=\"dark\">\n        <Navbar.Brand to=\"/\">Navbar</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link  href=\"/\">Home</Nav.Link>\n        </Nav>\n      </Navbar>\n    )\n}","import React, { useState } from 'react';\nimport TimeKeeper from 'react-timekeeper';\nimport {CardGroup, Card, Nav } from 'react-bootstrap';\nimport '../App.css'\nimport Navbar from './Navbar';\n\nfunction setAlarm() {\n    const [time, setTime] = useState('12:34pm')\n\n    return (\n\n        <>\n\n            < Navbar />\n            <CardGroup>\n                <Card className=\"homeCard\">\n                    <div className=\"mt-5\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\n                        <Card className=\"clock\">\n                            <TimeKeeper\n                                time={time}\n                                onChange={(data) => setTime(data.formatted12)}\n                            />\n                            <Card.Body>\n                                <Card.Text className=\"text-center\">\n                                    <span className=\"timeSet\">Selected Time: {time}</span>\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Card>\n            </CardGroup>\n\n        </>\n    )\n}\n\nexport default setAlarm;","import React, { useState, setState } from \"react\";\nimport axios from \"axios\";\n\nfunction SignUp() {\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n//   const [user, setUser] = useState({});\n\n function handleChangeUser(event) {\n    setUserName(event.target.value);\n  }\n\n  function handleChangePassword(event) {\n    setPassword(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"sign-up-form, username: \");\n    console.log(username);\n    console.log(password);\n    axios\n      .post(\"/\", {\n        username: username,\n        password: password\n      })\n      .then((response) => {\n        console.log(response);\n        // if (response.data) {\n        //   console.log(\"successful signup\");\n        //   .setUserName({\n        //     redirectTo: \"/login\"\n        //   });\n        // } else {\n        //   console.log(\"Sign-up error\");\n        // }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  return (\n    <div className=\"container\">\n      <form className=\"bg-light\">\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"username\"\n            aria-describedby=\"username\"\n            placeholder=\"Enter username\"\n            onChange={handleChangeUser}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"password\"\n            aria-describedby=\"password\"\n            placeholder=\"Enter password\"\n            onChange={handleChangePassword}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default SignUp;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport setAlarm from './pages/set';\nimport SignUp from \"./components/sign-up\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n    <div>\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"} component={SignUp} />\n        <Route exact path={process.env.PUBLIC_URL + \"/home\"} component={setAlarm} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}